var app = angular.module('mainApp', []);

app.config(function($locationProvider) {
	$locationProvider.html5Mode({
		enabled: true,
		requireBase: false
	});
});

app.run(function($rootScope, $q, $http, $location) {
	//items
	
	var all = {};
	var deferred = $q.defer();
	
	var amt = 0;
	var addAndCheck = function() {
		if(++amt >= 3)
			deferred.resolve();
	}
	
	$http.get('assets/data/items.xml').success(function(data) {
		var items = (new DOMParser()).parseFromString(data, 'text/xml').children[0];
		
		all.items = [];
		all.trinkets = [];
		
		for(var i = 0; i < items.children.length; i++) {
			var item = items.children[i];
			
			if(item.attributes.gfx) {
				var id = parseInt(item.id);
				
				var obj = {
					id: id,
					name: item.attributes.name.value,
					desc: item.attributes.description.value,
					type: item.tagName,
					special: (item.attributes.special ? 'yes' : 'no'),
					pool: [],
					prereq: (item.attributes.achievement ? item.attributes.achievement.value : 'default'),
					coins: (item.attributes.coins ? '+' + item.attributes.coins.value : 0),
					bombs: (item.attributes.bombs ? '+' + item.attributes.bombs.value : 0)
				};
				
				if(item.tagName == 'trinket') {
					id = all.trinkets.length + 1;
					obj.style = 'background:url(assets/img/trinkets.png) -' + (id % 9) * 64 + 'px -' + Math.floor(id / 9) * 64 + 'px / 576px;';
					obj.pool = ['consumable'];
					all.trinkets.push(obj);
				} else {
					id = all.items.length + 1;
					obj.style = 'background:url(assets/img/items.png) -' + (id % 19) * 64 + 'px -' + Math.floor(id / 19) * 64 + 'px / 1216px;';
					all.items.push(obj);
				}
			}
		}
	
		//item pools

		$http.get('assets/data/itempools.xml').success(function(data) {
			var items = (new DOMParser()).parseFromString(data, 'text/xml').children[0];

			for(var i = 0; i < items.children.length; i++) {
				var pool = items.children[i];
				var name = pool.attributes.Name.value;
				
				for(var j = 0; j < pool.children.length; j++) {
					var data = pool.children[j];
					
					for(var k = 0; k < all.items.length; k++) {
						var item = all.items[k];
						
						if(item.id == data.attributes.Id.value) {
							item.pool.push(' ' + name);
						}
					}
				}
			}
			
			for(var i = 0; i < all.items.length; i++) {
				var item = all.items[i];
				
				if(item.pool.length === 0) {
					item.pool.push('none?');
				}
			};
			
			addAndCheck();
		});
	
		//challenges

		$http.get('assets/data/challenges.xml').success(function(data) {
			var challenges = (new DOMParser()).parseFromString(data, 'text/xml').children[0];

			all.challenges = [];
			
			var items = [],
				trinkets = [],
				cards = [],
				players = [];
			
			for(var i = 0; i < all.items.length; i++) {
				var item = all.items[i];
				
				items[item.id] = item.name;
			}

			for(var i = 0; i < challenges.children.length; i++) {
				var challenge = challenges.children[i];
				var attrs = challenge.attributes;
				
				var id = parseInt(challenge.id); 

				var obj = {
					id: id,
					name: attrs.name.value,
					items: attrs.startingitems ? attrs.startingitems.value.split(',') : '',
					trinkets: attrs.startingtrinkets ? attrs.startingtrinkets.value : '',
					pills: attrs.startingpill ? attrs.startingpill.value : '',
					cards: attrs.startingcard ? attrs.startingcard.value : '',
					player: attrs.playertype ? attrs.playertype.value : '',
					goal: attrs.endstage ? attrs.endstage.value : '',
					rooms: attrs.roomfilter ? attrs.roomfilter.value : '',
					curses: attrs.cursefilter ? attrs.cursefilter.value : '',
					forcecurses: attrs.getcurse ? attrs.getcurse.value : '',
					prereq: attrs.achievements ? attrs.achievements.value : '',
					altpath: attrs.altpath ? attrs.altpath.value : '',
					canshoot: attrs.canshoot ? attrs.canshoot.value : '',
					soulhp: attrs.soulhp ? attrs.soulhp.value : '',
					blackhp: attrs.blackhp ? attrs.blackhp.value : '',
					damage: attrs.maxdamage ? attrs.maxdamage.value : '',
					tears: attrs.minfirerate ? attrs.minfirerate.value : '',
					shotspeed: attrs.minshotspeed ? attrs.minshotspeed.value : '',
					type: 'challenge',
					style: 'background:url(assets/img/challenges.png) -' + ((id - 1) % 5) * 64 + 'px -' + Math.floor((id - 1) / 5) * 64 + 'px / 320px;'
				}
				
				var names = [];
				
				for(var j = 0; j < obj.items.length; j++) {
					names[j] = items[obj.items[j]];
				}
				
				obj.items = names.join(', ');
				
				delete names;

				all.challenges.push(obj);
			}
			
			delete items;
			
			console.log(all.challenges);
			
			addAndCheck();
		});
	});
	
	//pocket items
	
	$http.get('assets/data/pocketitems.xml').success(function(data) {
		var items = (new DOMParser()).parseFromString(data, 'text/xml').children[0];
		
		all.cards = [];
		all.pills = [];
		all.runes = [];
		
		for(var i = 0; i < items.children.length; i++) {
			var item = items.children[i];
			
			var obj = {
				special: 'no',
				pool: ['consumable'],
				id: parseInt(item.id),
				name: item.attributes.name.value,
				desc: item.attributes.description ? item.attributes.description.value : '',
				prereq: item.attributes.achievement ? item.attributes.achievement.value : 'default'
			};
			
			if(item.tagName == 'rune') {
				var id = all.runes.length + 1;
				
				obj.style = 'background:url(assets/img/runes.png) -' + (id % 3) * 64 + 'px -' + Math.floor(id / 3) * 64 + 'px / 192px;';
				obj.type = 'rune';
				
				all.runes.push(obj);
			} else if(item.tagName == 'pilleffect') {
				var id = all.pills.length % 9;
				
				obj.style = 'background:url(assets/img/pills.png) -' + (id % 3) * 64 + 'px -' + Math.floor(id / 3) * 64 + 'px / 192px;';
				obj.type = 'pill';
				
				all.pills.push(obj);
			} else if(obj.name !== "NULL") {
				var id = all.cards.length;
				
				obj.style = 'background:url(assets/img/cards.png) -' + (id % 6) * 64 + 'px -' + Math.floor(id / 6) * 64 + 'px / 384px;'
				obj.type = 'card';
				obj.coins = (id == 8 ? '+ 1' : 0);
				obj.bombs = (id == 8 ? '+ 1' : 0);
				
				all.cards.push(obj);
			}
		}
			
		addAndCheck();
	});
	
	//after loading data
	
	deferred.promise.then(function() {
		//item data
		
		//my json is based on https://github.com/oxguy3/coebot-www/blob/master/boiitemsarray.json
		
		$http.get('assets/data/itemdata.json').success(function(src) {
			var data = src.data;
			
			var fields = ['items', 'cards', 'trinkets', 'pills', 'runes'];
			
			//items
			
			for(var i = 0; i < fields.length; i++) {
				var field = fields[i];
				
				for(var j = 0; j < data[field].length; j++) {
					var info = data[field][j];
					
					for(var k = 0; k < all[field].length; k++) {
						var item = all[field][k];
						
						if(item.id == info[0]) {
							item.health = info[2];
							item.damage = info[3];
							item.tears = info[4];
							item.speed = info[5];
							item.range = info[6];
							item.shotspeed = info[7];
							item.tearheight = info[8];
							item.luck = info[9];
							item.effect = (field == 'items' ? info[10].join('. ') + '.' : info[10]);

							break
						}
					}
				}
			}
		});
		
		//achievements

		$http.get('assets/data/achievements.xml').success(function(data) {
			var achievements = (new DOMParser()).parseFromString(data, 'text/xml').children[0];
			
			var fields = ['items', 'cards', 'trinkets', 'runes'];
			var max = Math.max.apply(null, fields.map(function(field) { return all[field].length }));

			for(var i = 0; i < achievements.children.length; i++) {
				var achievement = achievements.children[i];
				
				for(var j = 0; j < max; j++) {
					for(var k = 0; k < fields.length; k++) {
						var item = all[fields[k]][j];

						if(item && item.prereq == achievement.attributes.id.value) {
							item.prereq = achievement.attributes.desc.value;
						}
					}
				}
			}
			
			var merged = all.items.concat(all.cards, all.trinkets, all.pills, all.runes, all.challenges);

			$rootScope.tabs = [
				['all', merged],
				['items', all.items],
				['cards', all.cards],
				['trinkets', all.trinkets],
				['pills', all.pills],
				['runes', all.runes],
				['challenges', all.challenges],
				['dice rooms', []],
				['misc', []]
			];

			$rootScope.all = all;
		});
	});
	
	//searching and clicking
	
	$rootScope.filter = '';
	
	$rootScope.updateSearch = function() {
		var filter = $rootScope.filter.toLowerCase();
		var items = document.getElementById('grid').children;
		
		for(var i = 0; i < items.length; i++) {
			var item = items[i];
			var name = item.innerHTML;
			
			if(filter.length > 0) {
				if(item.innerHTML.toLowerCase().search(filter) > -1)
					item.classList.remove('inactive');
				else
					item.classList.add('inactive');
			} else
				item.classList.remove('inactive');
		}
	}
	
	$rootScope.clearSearch = function() {
		$rootScope.filter = '';
		
		$rootScope.updateSearch();
	}
	
	//clicking init
	
	$rootScope.clicked = false;
	
	document.body.onclick = function() {
		var clicked = document.getElementsByClassName('clicked')[0]

		if(clicked) clicked.classList.remove('clicked');

		$rootScope.clicked = false;
	}
	
	document.getElementsByTagName('main')[0].onclick = function(e) {
		e.stopPropagation();
	}
	
	//stats stuff
	
	$rootScope.val = function(item) {
		switch(item.type) {
			case 'challenge':
				return '#' + item.id;
				break
			
			case 'die':
				return item.id;
				break
				
			default:
				return item.name;
		}
	}
	
	var baseUrl = 'http://bindingofisaacrebirth.gamepedia.com/';
	
	$rootScope.url = function(item) {
		if(!item) return '';
		
		switch(item.type) {
			case 'active':
			case 'passive':
			case 'familiar':
			case 'trinket':
				return baseUrl + item.name.replace(/\?\?\?/g, 'Blue Baby').replace(/\s/g, '_');
				break;
			
			case 'card':
			case 'rune':
				return baseUrl + 'Cards_and_Runes';
				break;
		}	
	}
	
	$rootScope.strip = function(str) {
		return str ? str.replace('&', '') : '0';
	}
	
	$rootScope.color = function(str) {
		if(!str) return;
		
		str = str.toLowerCase();
		
		var char = str.charAt(0);
		
		if(char == '&' || str == 'familiar' || str == 'yes')
			return 'blue'
		else if(char == '+' || char == '*' || str == 'passive')
			return 'green'
		else if(char == '-' || char == '/' || str == 'active' || str == 'death')
			return 'red'
	}
	
	//tab stuff
	
	var tabs = {all: 0, items: 1, cards: 2, trinkets: 3, pills: 4, runes: 5, challenges: 6};
	
	$rootScope.setTab = function(tab) {
		$location.hash(tab);
	}
	
	$rootScope.isTab = function(tab) {
		return $location.hash() == tab ? 'active' : false;
	}
	
	$rootScope.getTab = function(tab) {
		return tabs[$location.hash() || 'all'];
	}
});

app.directive('gridItem', function() {
	return {
		restrict: 'A',
		template: '',
		link: function(scope, elem, attr) {
			var item = elem[0];
			
			var id = parseInt(attr.id);
			
			//hover
			
			item.onmouseover = function() {
				if(scope.$root.clicked) return;
				
				scope.$root.curItem = scope.tabs[scope.getTab()][1][id];
				scope.$apply();
				
				var pos = item.style.backgroundPosition.match('(.*)px (.*)px');
				
				var big = document.getElementById('big');
				
				big.style.backgroundImage = item.style.backgroundImage;
				big.style.backgroundSize = (parseInt(item.style.backgroundSize) / 64) * 140 + 'px auto';
				big.style.backgroundPosition = (parseInt(pos[1]) / 64) * 140 + 'px ' + (parseInt(pos[2]) / 64) * 140 + 'px';
			}
			
			//click
			
			item.onclick = function() {
				var wasclicked = scope.$root.clicked;
				
				scope.$root.clicked = false;
				
				if(wasclicked && scope.$root.curItem == scope.tabs[scope.getTab()][1][id])
					this.classList.remove('clicked');
				else {
					var clicked = document.getElementsByClassName('clicked')[0]
					
					if(clicked) clicked.classList.remove('clicked');
					
					this.classList.add('clicked');
					
					this.onmouseover();
				
					scope.$root.clicked = true;
				}
			}
		}
	}
});